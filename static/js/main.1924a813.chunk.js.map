{"version":3,"sources":["components/QuizQuestion/index.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","question","answers","map","v","type","value","text","className","onClick","nextQuestion","React","Component","TitlePage","state","titleText","currentState","counter","currentQuestion","timeLimit","clearInterval","timer","setState","console","log","setInterval","questions","possibleAnswers","id","start","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6hBAkBeA,G,uLAfL,IAAD,OACP,OACE,oCACA,4BAAKC,KAAKC,MAAMC,UACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,GACvB,OAAO,2BAAOC,KAAK,SACnBC,MAAOF,EAAEG,KACTC,UAAU,eACVC,QAAS,kBAAM,EAAKT,MAAMU,0B,GATLC,IAAMC,Y,OCO3BC,E,YACJ,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAQ,CAACC,UAAW,uBACzBC,aARgB,EAShBC,QAAS,EACTC,gBAAiB,GACjB,EAAKD,QAAU,EACf,EAAKE,UAVU,GAGE,E,4EAUjBC,cAAcrB,KAAKsB,OACnBtB,KAAKuB,SAAS,CACZP,UAAU,wBACVC,aAlBc,M,8BAsBT,IAAD,OACNO,QAAQC,IAAI,aACZzB,KAAKuB,SAAS,CAACL,QAAQ,IACvBlB,KAAKuB,SAAS,CAACN,aAxBI,IAyBnBjB,KAAKsB,MAAQI,aAAY,WACvBF,QAAQC,IAAI,mBACZ,EAAKF,SAAS,CAACL,QAAU,EAAKH,MAAMG,QAAQ,IACzC,EAAKH,MAAMG,QAAU,EAAKE,UAC3B,EAAKG,SAAS,CAACP,UAAU,mBAAqB,EAAKD,MAAMG,WAEzD,EAAKK,SAAS,CAACP,UAAU,eACzBK,cAAc,EAAKC,UAEpB,O,6BAEErB,GAAQ,IAAD,OAEZ,OADAuB,QAAQC,IAAI,iBAEV,yBAAKhB,UAAU,OACb,6BAAMT,KAAKoB,UAAYpB,KAAKe,MAAMG,SAxCnB,IAyCflB,KAAKe,MAAME,aACX,kBAAC,EAAD,CAAcd,QAASwB,EAAU3B,KAAKe,MAAMI,iBAAiBS,gBAC7D1B,SAAUyB,EAAU3B,KAAKe,MAAMI,iBAAiBjB,SAChDS,aAAc,kBAAM,EAAKA,kBAEzB,wBAAIF,UAAU,SAAST,KAAKe,MAAMC,WAClC,2BAAOa,GAAG,cAAcvB,KAAK,SAASC,MAAM,QAAQG,QAAS,kBAAM,EAAKoB,gB,GA5CxDlB,IAAMC,WAwDfkB,MANf,WACE,OACE,kBAAC,EAAD,OCjDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.1924a813.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass QuizQuestion extends React.Component {\r\nrender() {\r\n  return( \r\n    <>\r\n    <h2>{this.props.question}</h2>\r\n    {this.props.answers.map((v) => {\r\n      return <input type=\"button\" \r\n      value={v.text} \r\n      className=\"answerButton\" \r\n      onClick={() => this.props.nextQuestion()}></input>\r\n    })}\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nexport default QuizQuestion","import React from 'react';\nimport './App.css';\nimport QuizQuestion from './components/QuizQuestion'\nimport questions from './questions.json'\n\nconst TITLE_STATE = 0\nconst QUESTION_STATE = 1\nconst TIME_LIMIT = 10\n\nclass TitlePage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {titleText: \"Welcome to our Quiz!\",\n    currentState: TITLE_STATE,\n    counter: 0,\n    currentQuestion: 0}\n    this.counter = 0\n    this.timeLimit = TIME_LIMIT\n  }\n  nextQuestion() {\n    clearInterval(this.timer)\n    this.setState({\n      titleText:\"You answered early!!!\",\n      currentState: TITLE_STATE\n    })\n  }\n\n  start() {\n    console.log(\"Starting!\")\n    this.setState({counter:0})\n    this.setState({currentState: QUESTION_STATE})\n    this.timer = setInterval(() => { \n      console.log(\"INTERVAL CALLED\")\n      this.setState({counter : this.state.counter+1})\n      if(this.state.counter < this.timeLimit) {\n        this.setState({titleText:\"Begin the quiz! \" + this.state.counter})\n      } else {\n        this.setState({titleText:\"Time's up!\"})\n        clearInterval(this.timer)\n      }\n    }, 1000);\n  }\n  render(props) {\n    console.log(\"RENDER CALLED\")\n    return (\n      <div className='App'>\n        <div>{this.timeLimit - this.state.counter}</div>\n      {(this.state.currentState === QUESTION_STATE) ?\n        <QuizQuestion answers={questions[this.state.currentQuestion].possibleAnswers} \n        question={questions[this.state.currentQuestion].question} \n        nextQuestion={() => this.nextQuestion()} />\n        : \n        <h1 className='title'>{this.state.titleText}</h1>}\n        <input id='startButton' type=\"button\" value=\"Start\" onClick={() => this.start()}></input>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <TitlePage />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}